@page "/HISFileUpload"
@using ALISS.Data
@using ALISS.Data.D5_HISData
@using ALISS.HISUpload.DTO;
@using BlazorInputFile
@using System.IO;
@using ALISS.Shared 

@inject IJSRuntime jsRuntime
@inject ConfigDataService configDataService
@inject NavigationManager navigationManager
@inject HISFileUploadService HISUploadservice
@inject DropDownListDataService ddlDataService
@inject FileUploadManageService fileUploadManageService

<div>
    <div class="divHead">
        Upload HIS File
    </div>
</div>

@if (gridDatas == null || lab_ddl_List == null)
    {
        <Loading ShowModel="true" />
        <p><em>Loading...</em></p>
    }
    else
    {
<br />
<div class="container inputArea">
    <div class="row justify-content-between">
        <div class="col-12 col-xl-4">
            <div class="row justify-content-center divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("hfu_hoscode")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchModel.hfu_hos_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List.Select(x => new { x.arh_code, x.arh_name, x.prv_code, x.prv_name, x.hos_code, x.hos_name }).Where(x => (searchModel.hfu_arh_code == null || x.arh_code == searchModel.hfu_arh_code) && (searchModel.hfu_prv_code == null || x.prv_code == searchModel.hfu_prv_code))" ValueProperty="hos_code" TextProperty="hos_name" Change="@(args => DDL_Change("Hos", args))" />
                </div>
            </div>
        </div>
        <div class="col-12 col-xl-4">
            <div class="row justify-content-center divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("hfu_province")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchModel.hfu_prv_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List.Select(x => new { x.arh_code, x.arh_name, x.prv_code, x.prv_name }).Where(x => (searchModel.hfu_arh_code == null || x.arh_code == searchModel.hfu_arh_code)).Distinct()" ValueProperty="prv_code" TextProperty="prv_name" Change="@(args => DDL_Change("Prv", args))" />
                </div>
            </div>
        </div>
        <div class="col-12 col-xl-4">
            <div class="row justify-content-center divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("hfu_arhcode")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchModel.hfu_arh_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List.Select(x => new { x.arh_code, x.arh_name }).Distinct()" ValueProperty="arh_code" TextProperty="arh_name" Change="@(args => DDL_Change("Arh", args))" />
                </div>
            </div>
        </div>
        <div class="col-12 col-xl-4">
            <div class="row justify-content-center divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("hfu_lab")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchModel.hfu_lab" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List.Where(x => x.hos_code == searchModel.hfu_hos_code)" ValueProperty="lab_code" TextProperty="lab_name" Change="@(args => DDL_Change("Lab", args))" />
                </div>
            </div>
        </div>

        <div class="col-12 col-xl-4">
            <div class="row justify-content-center divGroup buttonArea">
                <div class="col-auto">
                    <RadzenButton class="btnSearch" Text="Search" Click="SearchData" />
                </div>
                <div class="col-auto">
                    <RadzenButton class="btnClear" Text="Clear" Click="ClearInboxData" />
                </div>
            </div>
        </div>

    </div>
</div>

<hr />

<div>
    @if (mainLayout.loginUser.PagePermission.rop_create == true)
    {
        <div class="container">
            <div class="row justify-content-end">
                <div class="col-auto buttonArea">
                    <RadzenButton Text="Upload File" class="btnAdd"
                                  Click="@ShowUploadEntryDialog" Disabled="@(HISFileData.hfu_lab != null ? false : true)" />
                </div>
            </div>
        </div>
        <br />
    }
    <div style="width:90%;margin:0px auto;">
        <div class="container">
            <div class="row justify-content-end">
                <div class="col-auto">
                    <label>Rows : </label>
                </div>
                <div class="col-auto">
                    <RadzenDropDown @bind-Value="inboxGrid.PageSize" TValue="int" AllowFiltering="true" Data="inboxGrid.PageSizeOption" Change="SearchData" Style="width:50px" />
                </div>
            </div>
        </div>
        <RadzenGrid AllowFiltering="true" AllowSorting="true" AllowPaging="true" PageSize="inboxGrid.PageSize" @ref="inboxGrid.radzenGrid" Data="@gridDatas" TItem="HISUploadDataDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
            <Columns>
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="120px" Property="hfu_file_name" Title="File Name">
                    <FooterTemplate>
                        <label title="@inboxGrid.FooterLabelString">@inboxGrid.FooterLabelString</label>
                    </FooterTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="110px" Property="hfu_total_records" Title="Total Record(s)">
                    <Template Context="data">
                        @String.Format("{0:n0}", data.hfu_total_records)
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="110px" Property="hfu_error_records" Title="Error Record(s)">
                    <Template Context="data">
                        @String.Format("{0:n0}", data.hfu_error_records)
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="120px" Title="Data Period" />
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="80px" Property="hfu_status_str" Title="Status" />
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="110px" Property="hfu_createdate" Title="Upload Date" />
                <RadzenGridColumn TItem="HISUploadDataDTO" Width="80px" Property="hfu_createuser" Title="Upload By" />

                <RadzenGridColumn TItem="HISUploadDataDTO" Property="" Title="" Width="120px" Context="data" Filterable="false" Sortable="false">
                    <Template>
                        <RadzenButton Text="See detail" Style="background: #0A6839 0% 0% no-repeat padding-box;" Click="@(() => OpenHISFileUploadDetail(data.hfu_id.ToString()))" />
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    </div>
</div>
}

@if (ShowUploadEntryPopup == true)
{
    <div class="modal" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">

                </div>
                <div class="modal-body">
                    <EditForm Model="@HISFileData" OnValidSubmit="()=> ValidateFile()">
                        <DataAnnotationsValidator />
                        <div class="container inputArea">
                            <div class="row">
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("hfu_hoscode")" />
                                        </div>
                                        <div class="col">
                                            <RadzenDropDown @bind-Value="searchModel.hfu_hos_code" Disabled="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List" TextProperty="hos_name" ValueProperty="hos_code" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("hfu_province")" />
                                        </div>
                                        <div class="col">
                                            <RadzenDropDown @bind-Value="searchModel.hfu_prv_code" Disabled="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List" TextProperty="prv_name" ValueProperty="prv_code" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("hfu_arhcode")" />
                                        </div>
                                        <div class="col">
                                            <RadzenDropDown @bind-Value="searchModel.hfu_arh_code" Disabled="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List" TextProperty="arh_name" ValueProperty="arh_code" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("hfu_lab")" />
                                        </div>
                                        <div class="col">
                                            <RadzenDropDown @bind-Value="HISFileData.hfu_lab" Disabled="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List" ValueProperty="lab_code" TextProperty="lab_name" />
                                        </div>
                                    </div>
                                </div>
                                @if (HISFileData.hfu_lab != null)
                                {
                                    <div class="col-12">
                                        <div class="row justify-content-center divGroup">
                                            <div class="col">
                                                <LabelBox inputLabel="@configData.Get_Label("hfu_file_type")" />
                                            </div>
                                            <div class="col">
                                                <RadzenDropDown @bind-Value="HISFileData.hfu_file_type"
                                                                TValue="string"
                                                                Data="@(filetype.Select(c => new { ID = c, Name = c }).Distinct())"
                                                                TextProperty="Name" ValueProperty="ID" />
                                            </div>
                                        </div>
                                    </div>


                                    @if (HISFileData.hfu_file_type != null)
                                    {
                                        <div class="col-12">
                                            <div class="row justify-content-center divGroup">
                                                <div class="col">
                                                    <LabelBox inputLabel="Upload HIS File" />
                                                </div>
                                                <div class="col">
                                                    <InputFile OnChange="HandleFileSelection"></InputFile>
                                                </div>
                                            </div>
                                        </div>

                                        @if (selectedFiles != null)
                                        {
                                            <div class="col-12">
                                                <div class="row justify-content-center divGroup">
                                                    <div class="col">
                                                        <LabelBox inputLabel="@configData.Get_Label("hfu_file_type")" />
                                                    </div>
                                                    <div class="col">
                                                        <label>@selectedFiles.Name</label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>


                            <div class="row justify-content-center">
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup buttonArea">
                                        <div class="col-auto">
                                            <RadzenButton class="btnCancel" Text="Cancel" Click="@(() => ControlPopup("UploadEntry",false))" />
                                        </div>
                                        <div class="col-auto">
                                            <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="Upload"
                                                          disabled="@(selectedFiles == null ? true : false)" />
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>

                    </EditForm>
                </div>

            </div>
        </div>
    </div>
}

<Loading ShowModel="showModal" />

@code {
    [CascadingParameter] MainLayout mainLayout { get; set; }
    private ConfigData configData = new ConfigData();
    private const string MENU_CODE = "MNU_0501";
    private string classLabel = "col-4";
    private string classInput = "col-8";

    private List<HISUploadDataDTO> gridDatas ;
    private List<HISFileTemplateDTO> HISTemplateActive;
    HISUploadDataSearchDTO searchModel = new HISUploadDataSearchDTO();
    private List<HospitalLabDataDTO> lab_ddl_List;
    private List<DropDownListDTO> rol_List;
    private List<DropDownListDTO> lab_List = new List<DropDownListDTO>();
    private RadzenGridCustom<HISUploadDataDTO> inboxGrid = new RadzenGridCustom<HISUploadDataDTO>();
    HISUploadDataDTO HISFileData = new HISUploadDataDTO();
    private HISUploadDataDTO fileHeader = new HISUploadDataDTO();

    private bool showModal = false;
    private bool ShowUploadEntryPopup = false;

    LoginUserRolePermissionDTO permission;
    IFileListEntry selectedFiles;

    private enum eHISFileType
    {
        SP = 1,
        HIS = 2
    }

    string[] filetype = new[]
        {
            "SP",
            "HIS"
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchModel.hfu_arh_code = mainLayout.loginUser.arh_code,
                prv_code = searchModel.hfu_prv_code = mainLayout.loginUser.prv_code,
                hos_code = searchModel.hfu_hos_code = mainLayout.loginUser.hos_code,
                lab_code = searchModel.hfu_lab = mainLayout.loginUser.lab_code
            };


            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            rol_List = await ddlDataService.GetRoleListByModelAsync();

            //gridDatas = new List<HISUploadDataDTO>();
            HISTemplateActive = await HISUploadservice.GetHISTemplate_Active_Async(new HISFileTemplateDTO());
            gridDatas = await HISUploadservice.GetHISFileUploadListByModelAsync(searchModel);
        }
    }

    private async void SearchData()
    {
        showModal = true;

        gridDatas = await HISUploadservice.GetHISFileUploadListByModelAsync(searchModel);

        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);
        showModal = false;
        StateHasChanged();
    }

    private async void ClearInboxData()
    {
        searchModel.hfu_arh_code = null;
        searchModel.hfu_hos_code = null;
        searchModel.hfu_prv_code = null;
        searchModel.hfu_lab = null;
        SearchData();
    }

    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchModel.hfu_prv_code = null;
            searchModel.hfu_hos_code = null;
            searchModel.hfu_lab = null;
            HISFileData.hfu_lab = null;
        }
        else if (ddl_name == "Prv" && value == null)
        {
            searchModel.hfu_hos_code = null;
            searchModel.hfu_lab = null;
            HISFileData.hfu_lab = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchModel.hfu_arh_code = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            searchModel.hfu_lab = null;
            HISFileData.hfu_lab = null;
            HISFileData.hfu_hos_code = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            searchModel.hfu_prv_code = hos_select.prv_code;
            searchModel.hfu_arh_code = hos_select.arh_code;
            searchModel.hfu_lab = null;
            HISFileData.hfu_hos_code = hos_select.hos_code;
        }
        else if (ddl_name == "Lab" && value != null)
        {
            HISFileData.hfu_lab = searchModel.hfu_lab;
        }
        else if (ddl_name == "Lab" && value == null)
        {

            HISFileData.hfu_lab = null;
        }

        StateHasChanged();
    }
    private async Task ShowUploadEntryDialog()
    {
        ControlPopup("UploadEntry", true);
    }

    async Task ControlPopup(string type, bool control)
    {
        if (type == "UploadEntry")
        {
            ShowUploadEntryPopup = control;

            if (control == false)
            {
                selectedFiles = null;
                HISFileData.hfu_file_type = null;
            }
        }
    }

    private async Task OpenHISFileUploadDetail(string HISuploadID)
    {
        navigationManager.NavigateTo("HISFileUploadDetail/" + HISuploadID);
    }

    private async Task ValidateFile()
    {
        string confirmMessage = "";
        confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";

        if (HISFileData.hfu_file_type == eHISFileType.SP.ToString())
            confirmMessage += " File Type: " + HISFileData.hfu_file_type;


        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }

        showModal = true;

        List<HISUploadErrorMessageDTO> objCheckValidate = new List<HISUploadErrorMessageDTO>();
        objCheckValidate = await fileUploadManageService.ValidateSPFileAsync(selectedFiles, HISFileData);
        int totalRec = 0;
        if (objCheckValidate != null)
        {
            string ErrorMessage = "";
            foreach (HISUploadErrorMessageDTO item in objCheckValidate)
            {
                if (item.hfu_status == 'I' && item.hfu_Err_Column == "Total")
                {
                    Int32.TryParse(item.hfu_Err_Message, out totalRec);
                    ////ErrorMessage += "Total Record(s) = " + totalRec + "\n";
                    ErrorMessage += "Total Record(s) = " + String.Format("{0:n0}", totalRec) + "\n";
                }
                else if (item.hfu_status == 'E') {
                    ErrorMessage += "- " + item.hfu_Err_Message + "\n";
                }
                else if (item.hfu_status == 'W'){
                    //Save to table TRHISFileUploadSummary?
                    ErrorMessage += "Row " + item.hfu_Err_no + " : column " + item.hfu_Err_type  + " : " + item.hfu_Err_Message + "\n";
                }
            }

            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
        }

        var chkError = objCheckValidate.FirstOrDefault(x => x.hfu_status == 'E');

        if (chkError == null)
        {
            var path = objCheckValidate.FirstOrDefault(x => x.hfu_status == 'I' && x.hfu_Err_Column == "path").hfu_Err_Message;

            await SaveFileUpload(totalRec, path);

            // ------ Test save ---------
            var objWarning = objCheckValidate.Where(x => x.hfu_status == 'W').ToList();
            if (objWarning.Count() > 0)
            {
                await SaveFileUploadSumary(objWarning);
            }

            await ControlPopup("UploadEntry", false);
            showModal = false;

            SearchData();
            StateHasChanged();
        }
        else
        {
            showModal = false;
            return;
        }

    }

    async Task SaveFileUpload(int TotalRec, string path)
    {

        HISUploadDataDTO newHISFileUpload = new HISUploadDataDTO();
        
        
        //newHISFileUpload.hfu_mp_id = mp_id;
        //newHISFileUpload.lfu_mp_version = mp_version;
        newHISFileUpload.hfu_hos_code = HISFileData.hfu_hos_code;
        newHISFileUpload.hfu_template_id = HISTemplateActive.FirstOrDefault().hft_template_id;
        newHISFileUpload.hfu_lab = HISFileData.hfu_lab;
        newHISFileUpload.hfu_file_name = selectedFiles.Name;
        newHISFileUpload.hfu_file_path = path;
        newHISFileUpload.hfu_file_type = HISFileData.hfu_file_type;
        newHISFileUpload.hfu_total_records = TotalRec;
        newHISFileUpload.hfu_error_records = 0;
        newHISFileUpload.hfu_createuser = mainLayout.loginUser.Username;
        //newHISFileUpload.lfu_updateuser = mainLayout.loginUser.Username;

        fileHeader = await fileUploadManageService.SaveFileUploadAsync(selectedFiles, newHISFileUpload);

    }

    async Task SaveFileUploadSumary(List<HISUploadErrorMessageDTO> objFileUploadErrorMsg)
    {
        List<HISFileUploadSummaryDTO> objFileUploadSummary = new List<HISFileUploadSummaryDTO>();
        foreach (var obj in objFileUploadErrorMsg)
        {
            HISFileUploadSummaryDTO newHISSummary = new HISFileUploadSummaryDTO();

            newHISSummary.hus_hfu_id = fileHeader.hfu_id;
            newHISSummary.hus_error_fieldname = obj.hfu_Err_type;
            newHISSummary.hus_error_fielddescr = obj.hfu_Err_Message;
            newHISSummary.hus_error_fieldrecord = obj.hfu_Err_no.ToString();
            newHISSummary.hus_delete_flag = false;
            newHISSummary.hus_createuser = mainLayout.loginUser.Username;

            objFileUploadSummary.Add(newHISSummary);

        }

        var x = await fileUploadManageService.SaveFileUploadSumaryAsync(objFileUploadSummary);
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        selectedFiles = files.FirstOrDefault();

        var type = Path.GetExtension(selectedFiles.Name);
        if (type != ".xlsx" && type != ".xls")
        {
            if (selectedFiles.Type != "")
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ " + selectedFiles.Name);
                selectedFiles = null;
                return;
            }
        }
    }

}
