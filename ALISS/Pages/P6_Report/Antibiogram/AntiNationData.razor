@page "/Report/AntiNationData"

@using ALISS.Data.D6_Report.Antibiogram
@using ALISS.ANTIBIOGRAM.DTO
@using System.Globalization

@inject ConfigDataService configDataService
@inject DropDownListDataService ddlDataService
@inject ReportService ReportService
@inject DialogService dialogService
@inject NavigationManager navigationManager
@inject SpecimenService specimenService
@inject ConfigDataService configDataService

<div>
    <div class="divHead">
        Antibiogram ระดับประเทศ
    </div>
</div>


@if (gridDatas == null)
{
    <p><em>Loading...</em></p>
    <Loading ShowModel="true" />
}
else
{
    <div class="container inputArea">
        <br />
        <div class="row justify-content-start">
            <div class="col-12 col-xl-4">
                <div class="row justify-content-start divGroup">
                    <div class="@classLabel">
                        <LabelBox inputLabel="@configData.Get_Label("rpt_antnat_monthfrom")" />
                    </div>
                    <div class="@classMonth">
                        <RadzenDropDown AllowClear="false" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Placeholder="Select..."
                                        AllowFiltering="false" @bind-Value=@iMonthFrom
                                        Data="@MonthData" TextProperty="MonthName" ValueProperty="MonthValue" />
                    </div>
                    <div style="width:70px; vertical-align: middle;display: inline-block">
                        <RadzenNumeric TValue="int" Min="2000" Max="9999" @bind-Value=@iYearFrom />
                    </div>
                </div>

            </div>

            <div class="col-12 col-xl-4">
                <div class="row justify-content-start divGroup">
                    <div class="@classLabel">
                        <LabelBox inputLabel="@configData.Get_Label("rpt_antnat_monthto")" />
                    </div>
                    <div class="@classMonth">
                        <RadzenDropDown AllowClear="false" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Placeholder="Select..."
                                        AllowFiltering="false" @bind-Value=@iMonthTo
                                        Data="@MonthData" TextProperty="MonthName" ValueProperty="MonthValue" />
                    </div>
                    <div style="width:70px; vertical-align: middle;display: inline-block">
                        <RadzenNumeric TValue="int" Min="2000" Max="9999" @bind-Value=@iYearTo />
                    </div>
                </div>

            </div>
        </div>

        <div class="row justify-content-start">
            <div class="col-12 col-xl-4">
                <div class="row justify-content-start divGroup">
                    <div class="@classLabel">
                        <LabelBox inputLabel="@configData.Get_Label("rpt_antnat_specimen")" />
                    </div>
                    <div class="@classInput">
                        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@searchAnti.spc_code AllowFiltering="true" Placeholder="Select..."
                                        Data="@SpecimenMaster" TextProperty="spc_name" ValueProperty="spc_code"/>
                    </div>
                </div>
            </div>

        </div>

        <div class="row justify-content-end">
            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup buttonArea">
                    <div class="col-auto">
                        <RadzenButton class="btnSearch" Text="Search" Click="SearchData" />
                    </div>
                    <div class="col-auto">
                        <RadzenButton class="btnClear" Text="Clear" Click="ClearData" />
                    </div>
                </div>
            </div>
        </div>

    </div>
    <hr />

    <div style="width:90%;margin:0px auto;">
        <div class="container">
            <div class="row justify-content-end">
                <div class="col-auto">
                    <label>Rows : </label>
                </div>
                <div class="col-auto">
                    <RadzenDropDown @bind-Value="inboxGrid.PageSize" TValue="int" AllowFiltering="true" Data="inboxGrid.PageSizeOption" Change="SearchData" Style="width:50px" />
                </div>
            </div>
        </div>
        <RadzenGrid AllowPaging="true" AllowFiltering="true" AllowSorting="true" PageSize="@inboxGrid.PageSize" Data="@(gridDatas.Where(s=> s.percent_s > 0).OrderByDescending(o=> o.percent_s).ToList())" TItem="AntibiogramDataDTO" @ref="inboxGrid.radzenGrid" ColumnWidth="120px">
            <Columns>
                <RadzenGridColumn TItem="AntibiogramDataDTO" Property="total_isolate" Title="จำนวนส่งตรวจ" Width="100px">
                    <FooterTemplate>
                        <label title="@inboxGrid.FooterLabelString">@inboxGrid.FooterLabelString</label>
                    </FooterTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="AntibiogramDataDTO" Property="total_org" Title="จำนวนเชื้อที่พบ" Width="100px" />
                <RadzenGridColumn TItem="AntibiogramDataDTO" Property="anti_name" Title="ชื่อยา" Width="150px" />
                <RadzenGridColumn TItem="AntibiogramDataDTO" Property="total_drug_test" Title="จำนวนทดสอบยา" Width="100px" />
                <RadzenGridColumn TItem="AntibiogramDataDTO" Type="double" Property="percent_s" Title="%S" Width="70px" />
            </Columns>
        </RadzenGrid>
    </div>
    <hr />
}

@code {

    [CascadingParameter] MainLayout mainLayout { get; set; }
    private const string MENU_CODE = "MNU_0703";
    private ConfigData configData = new ConfigData();
    private List<HospitalLabDataDTO> lab_ddl_List;
    private RadzenGridCustom<AntibiogramDataDTO> inboxGrid = new RadzenGridCustom<AntibiogramDataDTO>();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private string classMonth = "col-4";


    private List<AntibiogramDataDTO> gridDatas;
    AntiNationSearchDTO searchAnti = new AntiNationSearchDTO();
    private int iMonthFrom = 1;
    private int iMonthTo = DateTime.Today.Month;
    private int iYearFrom = DateTime.Today.Year;
    private int iYearTo = DateTime.Today.Year;
    private DateTime dtStartDate;
    private DateTime dtEndDate;
    private CultureInfo USCulture = new CultureInfo("en-US");
    private List<SpecimenDTO> SpecimenMaster = new List<SpecimenDTO>();
    private bool pageLoading { get { return (searchAnti == null); } }

    private class MonthItem
    {
        public int MonthValue { get; set; }
        public string MonthName { get; set; }
    }

    MonthItem[] MonthData = new MonthItem[] {
        new MonthItem
        {
            MonthValue = 1,
            MonthName = "January"
        },
        new MonthItem
        {
           MonthValue = 2,
           MonthName = "Febuary"
        },
        new MonthItem
        {
          MonthValue = 3,
          MonthName = "March"
        },
        new MonthItem
        {
           MonthValue = 4,
           MonthName = "April"
        },
        new MonthItem
        {
           MonthValue = 5,
           MonthName = "May"
        },
        new MonthItem
        {
            MonthValue = 6,
            MonthName = "June"
        },
        new MonthItem
        {
           MonthValue = 7,
            MonthName = "July"
        },
        new MonthItem
        {
           MonthValue = 8,
            MonthName = "August"
        },
        new MonthItem
        {
            MonthValue = 9,
            MonthName = "September"
        },
        new MonthItem
        {
           MonthValue = 10,
            MonthName = "October"
        },
        new MonthItem
        {
            MonthValue = 11,
            MonthName = "November"
        },
        new MonthItem
        {
           MonthValue = 12,
           MonthName = "December"
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });

            SpecimenMaster = await specimenService.GetListByModelActiveAsync(new SpecimenDTO());
            gridDatas = await ReportService.GetAntibiogramNationListModelAsync(searchAnti);
        }      
    }

    private async Task SearchData()
    {
        dtStartDate = new DateTime(iYearFrom, iMonthFrom, 1);

        int numberOfDays = DateTime.DaysInMonth(iYearTo, iMonthTo);
        dtEndDate = new DateTime(iYearTo, iMonthTo, numberOfDays);

        searchAnti.start_date = dtStartDate;
        searchAnti.end_date = dtEndDate;
        gridDatas = null;
        StateHasChanged();

        gridDatas = await ReportService.GetAntibiogramNationListModelAsync(searchAnti);
        StateHasChanged();
    }

    private async Task ClearData()
    {
        searchAnti.spc_code = null;
        StateHasChanged();

        await SearchData();
    }

}

