@page "/MasterManagement/MasterHospital"

@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject DialogService dialogService

@inject ConfigDataService configDataService
@inject DropDownListDataService ddlDataService
@inject MasterHospitalService masterHospitalService

<div>
    <div class="divHead">
        Hospital
    </div>
</div>

@if (pageLoading)
{
    <p><em>Loading...</em></p>

    <Loading ShowModel="true" />
}
else
{
    <div class="container inputArea">
        <div class="row">
            <InputBox ConfigData="@(configData.Get_ConfigRow("hos_name"))">
                <RadzenTextBox @bind-Value="@searchModel.hos_name" />
            </InputBox>
            <InputBox ConfigData="@(configData.Get_ConfigRow("hos_province_code"))">
                <RadzenDropDown @bind-Value="searchModel.hos_province_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="prv_DDL_List.Where(x => (searchModel.hos_arh_code == null || x.arh_code == searchModel.hos_arh_code))" TextProperty="prv_name" ValueProperty="prv_code" Change="@(args => DDL_Change("Prv", args))" Style="width:100%;" />
            </InputBox>
            <InputBox ConfigData="@(configData.Get_ConfigRow("hos_arh_code"))">
                <RadzenDropDown @bind-Value="searchModel.hos_arh_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="prv_DDL_List.Select(x => new { x.arh_code, x.arh_name }).Distinct().OrderBy(x => x.arh_code)" TextProperty="arh_name" ValueProperty="arh_code" Change="@(args => DDL_Change("Arh", args))" Style="width:100%;" />
            </InputBox>
        </div>
        <div class="row justify-content-end">
            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup  buttonArea">
                    <div class="col-auto">
                        <RadzenButton class="btnSearch" Text="Search" Click="SearchInboxData" />
                    </div>
                    <div class="col-auto">
                        <RadzenButton class="btnClear" Text="Clear" Click="ClearInboxData" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

    <div>
        <div class="container">
            <div class="row justify-content-end">
                <div class="col-auto buttonArea">
                    <RadzenButton Icon="add" class="btnAdd" Text="Add Hospital" Click="@(() => ShowPopupDialog(null))" />
                </div>
            </div>
        </div>

        <br />

        <div style="width:90%;margin:0px auto;">
            <div class="container">
                <div class="row justify-content-end">
                    <div class="col-auto">
                        <label>Rows : </label>
                    </div>
                    <div class="col-auto">
                        <RadzenDropDown @bind-Value="inboxGrid.PageSize" TValue="int" AllowFiltering="true" Data="inboxGrid.PageSizeOption" Change="SearchInboxData" Style="width:50px" />
                    </div>
                </div>
            </div>
            <RadzenGrid TItem="MasterHospitalDTO" @ref="inboxGrid.radzenGrid" Data="@searchResultList" PageSize="inboxGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true">
                <Columns>
                    <RadzenGridColumn TItem="MasterHospitalDTO" Property="" Title="" Width="50px" Filterable="false" Context="data">
                        <Template>
                            <RadzenButton Icon="edit" Style="background: #0A6839" Click="@(() => ShowPopupDialog(data))" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="MasterHospitalDTO" Property="hos_code" Title="@configData.Get_Label("hos_code")">
                        <FooterTemplate>
                            <label title="@inboxGrid.FooterLabelString">@inboxGrid.FooterLabelString</label>
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="MasterHospitalDTO" Property="hos_name" Title="@configData.Get_Label("hos_name")" />
                    <RadzenGridColumn TItem="MasterHospitalDTO" Property="hos_province_name" Title="@configData.Get_Label("hos_province_code")" />
                    <RadzenGridColumn TItem="MasterHospitalDTO" Property="hos_arh_name" Title="@configData.Get_Label("hos_arh_code")" />
                    <RadzenGridColumn TItem="MasterHospitalDTO" Property="hos_active" Title="@configData.Get_Label("hos_active")" Context="data">
                        <Template>
                            @if (data.hos_active == true)
                            {
                                <label>Active</label>
                            }
                            else
                            {
                                <label>Inactive</label>
                            }
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>

        <br />

    </div>

    <hr />

    @if (showPopupDialog)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">

                    </div>
                    <div class="modal-body">
                        <EditForm Model="@dataModel" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="container inputArea">
                                <div class="row justify-content-center">
                                    <InputBox ConfigData="@(configData.Get_ConfigRow("hos_code"))"classColumn="col-xl-12">
                                        @if (dataModel.hos_status == "N")
                                        {
                                            <RadzenTextBox @bind-Value="@dataModel.hos_code" Placeholder="กรอกได้เฉพาะ a-zA-Z0-9_-" />
                                            <ValidationMessage For="@(() => dataModel.hos_code)" />
                                        }
                                        else
                                        {
                                            <RadzenTextBox @bind-Value="@dataModel.hos_code" ReadOnly="true" />
                                        }
                                    </InputBox>
                                </div>
                                <div class="row justify-content-center">
                                    <InputBox ConfigData="@(configData.Get_ConfigRow("hos_name"))"classColumn="col-xl-12">
                                        <RadzenTextBox @bind-Value="@dataModel.hos_name" />
                                        <ValidationMessage For="@(() => dataModel.hos_name)" />
                                    </InputBox>
                                </div>
                                <div class="row justify-content-center">
                                    <InputBox ConfigData="@(configData.Get_ConfigRow("hos_arh_code"))"classColumn="col-xl-12">
                                        <RadzenDropDown @bind-Value="dataModel.hos_arh_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="prv_DL_DDL_List.Select(x => new { x.arh_code, x.arh_name }).Distinct().OrderBy(x => x.arh_code)" TextProperty="arh_name" ValueProperty="arh_code" Change="@(args => DL_DDL_Change("Arh", args))" Style="width:100%;" />
                                        <ValidationMessage For="@(() => dataModel.hos_arh_code)" />
                                    </InputBox>
                                </div>
                                <div class="row justify-content-center">
                                    <InputBox ConfigData="@(configData.Get_ConfigRow("hos_province_code"))"classColumn="col-xl-12">
                                        <RadzenDropDown @bind-Value="dataModel.hos_province_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="prv_DL_DDL_List.Where(x => (dataModel.hos_arh_code == null || x.arh_code == dataModel.hos_arh_code))" TextProperty="prv_name" ValueProperty="prv_code" Change="@(args => DL_DDL_Change("Prv", args))" Style="width:100%;" />
                                        <ValidationMessage For="@(() => dataModel.hos_province_code)" />
                                    </InputBox>
                                </div>
                                <div class="row justify-content-center">
                                    <InputBox ConfigData="@(configData.Get_ConfigRow("hos_active"))"classColumn="col-xl-12">
                                        <RadzenRadioButtonList @bind-Value="@dataModel.hos_active" TValue="bool">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Active" Value="true" />
                                                <RadzenRadioButtonListItem Text="Inactive" Value="false" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </InputBox>
                                </div>
                                <div class="row" justify-content-center>
                                    <div class="col-12">
                                        <div class="row justify-content-end divGroup buttonArea">
                                            <div class="col-auto">
                                                <RadzenButton class="btnCancel" Text="Cancel" Click="ClosePopup" />
                                            </div>
                                            <div class="col-auto">
                                                <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="Save" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <Loading ShowModel="showLoading" />
}

@code {
    [CascadingParameter] MainLayout mainLayout { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private bool showPopupDialog;
    private bool showLoading;

    private RadzenGridCustom<MasterHospitalDTO> inboxGrid = new RadzenGridCustom<MasterHospitalDTO>();
    MasterHospitalSearchDTO searchModel = new MasterHospitalSearchDTO();
    private List<MasterHospitalDTO> searchResultList;

    private List<LogProcessDTO> historyResultList;

    MasterHospitalDTO dataModel;

    private List<HospitalDataDTO> prv_List;
    private List<HospitalDataDTO> prv_DDL_List;
    private List<HospitalDataDTO> prv_DL_DDL_List;

    private bool pageLoading { get { return (searchResultList == null); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0201") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0201" });
            if (mainLayout.loginUser.rol_code == "ROL_00")
            {
                configData.ConfigDTOList.ForEach(x =>
                {
                    x.tbc_edit = true;
                });
            }

            var searchData = new HospitalDataDTO()
            {
                arh_code = mainLayout.loginUser.arh_code,
                prv_code = mainLayout.loginUser.prv_code,
                hos_code = mainLayout.loginUser.hos_code
            };

            prv_List = prv_DDL_List = prv_DL_DDL_List = await ddlDataService.GetProvinceListByModelAsync(searchData);

            historyResultList = await masterHospitalService.GetHistoryAsync();

            searchResultList = await masterHospitalService.GetListByModelAsync(searchModel);

            ClosePopup();

            StateHasChanged();
        }
    }

    private async Task SearchInboxData()
    {
        showLoading = true;
        StateHasChanged();

        searchModel.hos_name = searchModel.hos_name?.Trim();

        searchResultList = await masterHospitalService.GetListByModelAsync(searchModel);
        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);

        showLoading = false;
        StateHasChanged();
    }

    private async Task ClearInboxData()
    {
        showLoading = true;
        StateHasChanged();

        searchModel = new MasterHospitalSearchDTO();

        await SearchInboxData();
    }

    private void DDL_Change(string ddl_name, object value)
    {
        showLoading = true;
        StateHasChanged();

        if (ddl_name == "Arh" && value == null)
        {
            searchModel.hos_province_code = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = prv_DDL_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchModel.hos_arh_code = prv_select.arh_code;
        }

        showLoading = false;
        StateHasChanged();
    }

    private void DL_DDL_Change(string ddl_name, object value)
    {
        showLoading = true;
        StateHasChanged();

        if (ddl_name == "Arh" && value == null)
        {
            dataModel.hos_province_code = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = prv_DDL_List.FirstOrDefault(x => x.prv_code == value.ToString());

            dataModel.hos_arh_code = prv_select.arh_code;
            dataModel.hos_province_name = prv_select.prv_name;
        }

        showLoading = false;
        StateHasChanged();
    }

    private void ShowPopupDialog(MasterHospitalDTO selectModel)
    {
        if (selectModel == null)
        {
            dataModel = new MasterHospitalDTO()
            {
                hos_status = "N",
                hos_active = true,
                hos_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //dataModel = await masterHospitalService.GetDataAsync(hos_code);
            dataModel = selectModel;
            dataModel.hos_status = "E";
            dataModel.hos_updateuser = mainLayout.loginUser.Username;

            if (string.IsNullOrEmpty(dataModel.hos_province_code) == false)
            {
                DL_DDL_Change("Prv", dataModel.hos_province_code);
                dataModel.hos_province_code = dataModel.hos_province_code;
            }
        }

        showPopupDialog = true;
        StateHasChanged();
    }

    private void ClosePopup()
    {
        dataModel = new MasterHospitalDTO();

        showPopupDialog = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {

    }

    private async void HandleValidSubmit()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (dataModel.hos_status == "N")
            {
                //Check duplicate
                //var duplicate = await masterHospitalService.GetDataAsync(dataModel.hos_code);

                if (searchResultList.Any(x => x.hos_code == dataModel.hos_code))
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
            }

            //Save data
            var saveResult = await masterHospitalService.SaveDataAsync(dataModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save data complete.");

            ClosePopup();

            searchResultList = await masterHospitalService.GetListByModelAsync(searchModel);

            historyResultList = await masterHospitalService.GetHistoryAsync();

            showLoading = false;
            StateHasChanged();
        }
    }

}
